E:\MICROS_1\LAB_03\LAB03_4BYTEADDITION.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Tue Nov 04 18:06:19 2008

    1:                                      ;*************************************************************
    2:                                      ;Jacob S. Howarth
    3:                                      ;Microcomputers I - Lab 3
    4:                                      ;CE 320, Fall 2008
    5:                                      ;Prof. Foster
    6:                                      ;
    7:                                      ;Description: This program will take an array of 4 byte values
    8:                                      ;             and sum them up. The program will also indicate 
    9:                                      ;             unsigned and signed overflow for the sum.
   10:                                      ;*************************************************************
   11:                                      
   12:                                      ;Define constants
   13:          =000000FF                   TRUE    EQU     $FF ;true equals a byte of 1's
   14:          =00000000                   FALSE   EQU     $00 ;false = a byte of 0's
   15:                                      
   16:                                      ;Define space for the sum, array start address, overflow and length.
   17:          =00001000                                   ORG $1000
   18:     1000 +0002                       ARRAY           DS.W    1 ;this specifies space for the array start address
   19:          =00001004                                   ORG $1004
   20:     1004 +0001                       LENGTH          DS.B    1 ;this provides address for the length.
   21:          =00001010                                   ORG $1010
   22:     1010 +0004                       SUM             DS.W    2 ;this provides space for the sum.
   23:          =00001014                                   ORG $1014
   24:     1014 +0001                       UNSGN_OVRFLOW   DS.B    1 ;this provides space for the unsigned overflow
   25:     1015 +0001                       SGN_OVRFLOW     DS.B    1 ;this provides space for the signed overflow
   26:                                      
   27:          =00002000                                   ORG $2000
   28:     2000 180B 00 1014           [04]                 MOVB #FALSE,UNSGN_OVRFLOW ;clear contents in address for unsigned overflow
   29:     2005 180B 00 1015           [04]                 MOVB #FALSE,SGN_OVRFLOW ;clear contents in address for signed overflow
   30:     200A 79 1010                [03]                 CLR SUM         ;--
   31:     200D 79 1011                [03]                 CLR SUM + 1     ;  |
   32:     2010 79 1012                [03]                 CLR SUM + 2     ;  |--> clear the contents of sum to $00
   33:     2013 79 1013                [03]                 CLR SUM + 3     ;--
   34:     2016 FE 1000                [03]                 LDX  ARRAY      
   35:     2019 B6 1004                [03]                 LDAA LENGTH
   36:     201C 27 28                  [03] LOOP            BEQ  CHECK_OVRFLOW
   37:     201E E6 03                  [03]                 LDAB 3,X        ;use index addressing to grab contents of memory from 
   38:     2020 FB 1013                [03]                 ADDB SUM + 3    ;X + 3 and add to SUM + 3
   39:     2023 7B 1013                [03]                 STAB SUM + 3    ;store result in SUM + 3
   40:     2026 E6 02                  [03]                 LDAB 2,X        ;use index addressing to grab contents of memory from
   41:     2028 F9 1012                [03]                 ADCB SUM + 2    ;X + 2 and add to SUM + 2
   42:     202B 7B 1012                [03]                 STAB SUM + 2    ;store result in SUM + 2
   43:     202E E6 01                  [03]                 LDAB 1,X        ;use index addressing to grab contents of memory from
   44:     2030 F9 1011                [03]                 ADCB SUM + 1    ;X + 1 and add to SUM + 1
   45:     2033 7B 1011                [03]                 STAB SUM + 1    ;store result in SUM + 1
   46:     2036 E6 00                  [03]                 LDAB 0,X        ;use index addressing to grab contents of memory from
   47:     2038 F9 1010                [03]                 ADCB SUM        ;X and add to SUM
   48:     203B 7B 1010                [03]                 STAB SUM        ;store result in SUM
   49:     203E 1A 04                  [02]                 LEAX 4,X        
   50:     2040 43                     [01]                 DECA            ;decrement X and A by 4
   51:     2041 43                     [01]                 DECA
   52:     2042 43                     [01]                 DECA
   53:     2043 43                     [01]                 DECA
   54:     2044 20 D6                  [03]                 BRA LOOP
   55:     2046 24 05                  [03] CHECK_OVRFLOW   BCC NO_UNSIGNED_OVRFLOW ;if C bit is clear, skip assigning USGN_OVRFLOW address to TRUE
   56:     2048 180B FF 1014           [04]                 MOVB #TRUE,UNSGN_OVRFLOW
   57:     204D 28 05                  [03] NO_UNSIGNED_OVRFLOW  BVC NO_SIGNED_OVRFLOW ;if V bit is clear, skip assigning SGN_OVRFLOW address to TRUE
   58:     204F 180B FF 1015           [04]                 MOVB #TRUE,SGN_OVRFLOW
   59:     2054 3F                     [09] NO_SIGNED_OVRFLOW SWI ;end

Symbols:
array                           *00001000
check_ovrflow                   *00002046
false                           *00000000
length                          *00001004
loop                            *0000201c
no_signed_ovrflow               *00002054
no_unsigned_ovrflow             *0000204d
sgn_ovrflow                     *00001015
sum                             *00001010
true                            *000000ff
unsgn_ovrflow                   *00001014

