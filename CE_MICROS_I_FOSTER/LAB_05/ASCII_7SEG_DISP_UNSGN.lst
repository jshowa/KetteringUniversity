E:\MICROS_1\LAB_05\ASCII_7SEG_DISP_UNSGN.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Tue Nov 25 09:17:33 2008

    1:                                      ;**********************************************************
    2:                                      ; Jacob S. Howarth
    3:                                      ; Microcomputers I, Fall 2008
    4:                                      ; Professor Foster
    5:                                      ;
    6:                                      ; Purpose: This program converts a 2-byte hexadecimal
    7:                                      ; value in the range from 0 to 9999 to a 4-byte ASCII 
    8:                                      ; value and displays this value on the 7-segment displays.
    9:                                      ;**********************************************************
   10:                                      
   11:                                      ;Define the address of the two byte hexadecimal value and the place to store the ASCII value.
   12:          =00001000                                   ORG     $1000
   13:     1000 0100                        HEX_VALUE       DC.W    $0100
   14:     1002 +0004                       ASCII_STRING    DS.W    2
   15:                                      
   16:                                      ;Define DIGIT constants to be displayed for the digit subroutine
   17:          =00000001                   DIG1    EQU     %00000001 ; left digit
   18:          =00000002                   DIG2    EQU     %00000010 ; 2nd from left
   19:          =00000004                   DIG3    EQU     %00000100 ; 2nd from right
   20:          =00000008                   DIG4    EQU     %00001000 ; right digit
   21:                                      
   22:                                      ;Define ASCII offset and base 10 divisor
   23:          =00000030                   ASCII_OFFSET    EQU     $30
   24:                                      
   25:                                      ; initializes the 7 segment display
   26:                                      ; inputs - none
   27:                                      ; outputs - none
   28:                                      ; no affect on any registers
   29:          =00002800                   INIT7SEG EQU    $2800
   30:                                      
   31:                                      ; writes an ASCII character to the 7-segment display
   32:                                      ; inputs -  Register A: one of the 4 defined constants, by value
   33:                                      ;           to select which digit to write
   34:                                      ;           Register B: ASCII value to write, by value
   35:                                      ;           Currently, must be $30 to $39
   36:                                      ; outputs - changes 7-segment
   37:                                      ; Does not preserce registers
   38:          =00002880                   DIGIT   EQU     $2880
   39:                                      
   40:                                      ;Main program start
   41:          =00002000                           ORG $2000
   42:     2000 CF 3600                [02]         LDS #$3600 
   43:     2003 16 2800                [04]         JSR INIT7SEG ;1) Initialize the DDR registers for PTP and PORTB to outputs.
   44:     2006 CE 1002                [02]         LDX #ASCII_STRING
   45:     2009 34                     [02]         PSHX
   46:     200A CE 1000                [02]         LDX #HEX_VALUE ;2) Load register X with hex value address and push onto stack
   47:     200D 34                     [02]         PSHX 
   48:     200E 16 2C00                [04]         JSR ASCII_CONVRT ;3) Call the hex to ASCII conversion subroutine
   49:     2011 30                     [03]         PULX
   50:     2012 31                     [03]         PULY
   51:     2013 E6 40                  [03] Loop2   LDAB    0,Y
   52:     2015 86 01                  [01]         LDAA    #DIG1
   53:     2017 16 2880                [04]         JSR     DIGIT   
   54:     201A E6 41                  [03]         LDAB    1,Y
   55:     201C 86 02                  [01]         LDAA    #DIG2
   56:     201E 16 2880                [04]         JSR     DIGIT
   57:     2021 E6 42                  [03]         LDAB    2,Y
   58:     2023 86 04                  [01]         LDAA    #DIG3
   59:     2025 16 2880                [04]         JSR     DIGIT
   60:     2028 E6 43                  [03]         LDAB    3,Y
   61:     202A 86 08                  [01]         LDAA    #DIG4
   62:     202C 16 2880                [04]         JSR     DIGIT
   63:     202F 20 E2                  [03]         BRA     Loop2   
   64:                                      
   65:                                      
   66:                                      ;Subroutine that converts a 2-byte hexadecimal value to 4-byte ASCII
   67:                                      ; * Arguments - Reference address of hex value passed on the stack
   68:                                      ; * Return Value - Reference address of ASCII string returned on stack
   69:                                      ; * Registers are preserved.
   70:          =00002C00                                  ORG $2C00
   71:     2C00 EE 82                  [03] ASCII_CONVRT   LDX 2,SP ;Load X with the contents of the SP offset by 2
   72:     2C02 EC 00                  [03]                LDD 0,X  ;Load D with the hex value
   73:     2C04 ED 84                  [03]                LDY 4,SP ;Load Y with the LSB of ASCII String 
   74:     2C06 CE 000A                [02]                LDX #10
   75:     2C09 1810                   [0C]                IDIV     ;Load X with 10 and divide D by X and store quotient in X and remainder in D
   76:     2C0B CB 30                  [01]                ADDB #ASCII_OFFSET ;Add $30 to register B
   77:     2C0D 6B 43                  [02]                STAB 3,Y         ;Store value of register B in position Y and decrement Y and reload
   78:     2C0F B7C5                   [01]                XGDX             ;D with the new quotient
   79:     2C11 CE 000A                [02]                LDX #10
   80:     2C14 1810                   [0C]                IDIV     ;Load X with 10 and divide D by X and store quotient in X and remainder in D
   81:     2C16 CB 30                  [01]                ADDB #ASCII_OFFSET ;Add $30 to register B
   82:     2C18 6B 42                  [02]                STAB 2,Y         ;Store value of register B in position Y and decrement Y and reload
   83:     2C1A B7C5                   [01]                XGDX             ;D with the new quotient
   84:     2C1C CE 000A                [02]                LDX #10
   85:     2C1F 1810                   [0C]                IDIV     ;Load X with 10 and divide D by X and store quotient in X and remainder in D
   86:     2C21 CB 30                  [01]                ADDB #ASCII_OFFSET ;Add $30 to register B
   87:     2C23 6B 41                  [02]                STAB 1,Y         ;Store value of register B in position Y and decrement Y and reload
   88:     2C25 B7C5                   [01]                XGDX             ;D with the new quotient
   89:     2C27 CE 000A                [02]                LDX #10
   90:     2C2A 1810                   [0C]                IDIV     ;Load X with 10 and divide D by X and store quotient in X and remainder in D
   91:     2C2C CB 30                  [01]                ADDB #ASCII_OFFSET ;Add $30 to register B
   92:     2C2E 6B 40                  [02]                STAB 0,Y         ;Store value of register B in position Y and decrement Y and reload
   93:     2C30 B7C5                   [01]                XGDX             ;D with the new quotient
   94:     2C32 3D                     [05] END_CONVERSION RTS

Symbols:
ascii_convrt                    *00002c00
ascii_offset                    *00000030
ascii_string                    *00001002
dig1                            *00000001
dig2                            *00000002
dig3                            *00000004
dig4                            *00000008
digit                           *00002880
end_conversion                   00002c32
hex_value                       *00001000
init7seg                        *00002800
loop2                           *00002013

