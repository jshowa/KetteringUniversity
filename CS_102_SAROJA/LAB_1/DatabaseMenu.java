/**
*Author: Jacob S. Howarth
*Assignment A1
*DatabaseInput.java
*
*This class contains methods for loading the input file and converting the input to a database.
*
*/
import java.util.*;
import java.io.*;

public class DatabaseMenu {
	
	private Database database;
	private Scanner userInput;
	private String input;
	
	/**
	*
	*This is the class zero-arg constructor that initializes class instance variables
	*
	*/	
	public DatabaseMenu() {
		userInput = new Scanner(System.in);
		database = null;
	}
	
	/**
	*
	*Mutator for the menu input that allows the state of the user input to be saved.
	*
	*/
	public void setUserInput() {
		this.input = userInput.nextLine();
	}
	
	/**
	*
	*Accessor for the menu input that allows the state of the user input to be saved.
	*
	* @return   the input string typed in by the user
	*
	*/
	public String getUserInput() {
		return input;
	}
	
	/**
	*
	*Special mutator method that copies the database generated by the file into the menu
	*class to perform operations
	*
	* @param database   database that holds the file data
	*
	*/
	public void processDatabaseInput(Database database) {
		this.database = database;
	} 
	
	/**
	*
	*This method is used to determine what operations should be performed based on the options
	*available in the menu.
	*
	*/
	public void optionsSelect() {
		
		boolean goodInput = false;
		
		while (!goodInput) { // loop the option select until goodInput is entered, prevents invalid inputs from occuring at the menu
		
			System.out.println("Please select a valid option from the menu\n");
			System.out.print("input: ");
		
			setUserInput();
		
			if (getUserInput().equalsIgnoreCase("P")) { // compares the user input to the menu option commands to see if their equal
				printDatabase(); // if they are perform the operation pertinent to the menu command.
				goodInput = true; // set the good input flag to true, stopping the while loop.
			}
			else if ((getUserInput()).equalsIgnoreCase("LT")) {
				telephoneSearch();
				goodInput = true;
			}
			else if ((getUserInput()).equalsIgnoreCase("LA")) {
				addressSearch();
				goodInput = true;
			}
			else if ((getUserInput()).equalsIgnoreCase("LN")) {
				nameSearch();
				goodInput = true;
			}
			else if ((getUserInput()).equalsIgnoreCase("A")) {
				addPhoneDirectoryEntry();
				goodInput = true;
			}
			else if ((getUserInput()).equalsIgnoreCase("Q")) {
				System.exit(0);
			}
			else 
				System.out.println("\nInvalid input. Please type in a valid option as shown in the menu.");
		}
	}
	
	/**
	*
	*This method prints all entries in a database
	*
	*/
	public void printDatabase() {
		System.out.println("\n" + database.toString() + "\n" + "Total database entries -- " + database.getDatabaseLength() + "\n");
	}
	
	
	/**
	*
	*Helper method used to perform operations needed to search and print an entry from a database given a telephone number from user input.
	*
	*/
	public void telephoneSearch() {
		
		String telephoneSearchOutput = "";
		
		System.out.println("Enter a telephone number to search for.");
		System.out.print("input: "); 
		
		setUserInput(); // store the input from the user
		
		telephoneSearchOutput += database.telephoneLookUp(getUserInput());
		
		if (telephoneSearchOutput.equals("")) // if the telephoneLookUp returns an empty string, an entry with the phone number wasn't found
			System.out.println("\nNo entry is available with this phone number.\n");
		else
			System.out.println("\n" + "All entries containing the searched telephone number:\n\n" + telephoneSearchOutput + "\n");
	
	}
	
	/**
	*
	*Helper method used to perform operations needed to search and print an entry from a database given an address from user input
	*
	*/
	public void addressSearch() {
		
		String addressSearchOutput = "";
		
		System.out.println("Enter a address to search for. ");
		System.out.print("input: "); 
		
		setUserInput(); // store the input from the user
		
		addressSearchOutput += database.addressLookUp(getUserInput()); // concat output of method
		
		if (addressSearchOutput.equals("")) // if the addressLookUp returns an empty string, an entry with the phone number wasn't found
			System.out.println("\nNo entry is available with this address.\n");
		else
			System.out.println("\n" + "All entries containing the searched address:\n\n" + addressSearchOutput + "\n");
	
	}
	
	
	/**
	*
	*Helper method used to perform operations needed to search and print an entry from a database given a name from user input
	*
	*/
	public void nameSearch() {
		
		String nameSearchOutput = "";
		
		System.out.println("Enter a name number to search for. ");
		System.out.print("input: "); 
		
		setUserInput(); // store the input from the user
		
		nameSearchOutput += database.nameLookUp(getUserInput()); // concat output of method
		
		if (nameSearchOutput.equals("")) // if the nameLookUp returns an empty string, an entry with the phone number wasn't found
			System.out.println("\nNo entry is available with this name.\n");
		else
			System.out.print("\n" + "All entries containing the searched name:\n\n" + nameSearchOutput + "\n");
	
	}
	
	/**
	*
	*Helper method to perform the requested operations needed to add an entry to the database based off user input.
	*
	*/
	public void addPhoneDirectoryEntry() {
		
		String entry_name = "";
		String entry_address = "";
		String entry_phoneNumber = "";
		
		System.out.print("Enter the person's name: ");
		
		setUserInput();
		entry_name = getUserInput();
		
		System.out.print("Enter the person's address: ");
		
		setUserInput();
		entry_address = getUserInput();
		
		System.out.print("Enter the person's phone number: ");
		
		setUserInput();
		entry_phoneNumber = getUserInput();
		
		database.addEntry(new Entry(entry_name, entry_address, entry_phoneNumber));
		
		printDatabase();
	
	}
	
	/**
	*
	*This menu is the toString() method that prints the menu user interface
	*
	* @return   concatenated string containing the menu interface
	*
	*/	
	public String toString() {
		
		String menuUI = "";
		
		menuUI += "*******************************\n" +
							  "* phoneDirectory v1.0         *\n" +
							  "*                             *\n" +
							  "* Use: Input the file name    *\n" +
							  "* as an arguement during      *\n" +
							  "* compilation. When asked     *\n" +
							  "* to enter a command, please  *\n" +
							  "* type one of the commands in *\n" +
							  "* the OPTIONS list below.     *\n" +
							  "*                             *\n" +
							  "* Options:                    *\n" +
							  "*                             *\n" +
							  "* P - print database          *\n" +
							  "* LT - look up an entry by    *\n" +
							  "*      telephone number       *\n" +
							  "* LA - look up an entry given *\n" + 
							  "*      address                *\n" +
							  "* LN - look up an entry given *\n" +
							  "*      a name                 *\n" +
							  "* A - add an entry to the     *\n" +
							  "*     database                *\n" +
							  "* Q - Quit                    *\n" +
							  "*                             *\n" +
							  "*******************************\n";
		
		return menuUI;
	}
	
	
	
}